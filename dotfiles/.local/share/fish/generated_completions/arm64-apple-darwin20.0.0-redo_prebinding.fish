# arm64-apple-darwin20.0.0-redo_prebinding
# Autogenerated from man page /opt/homebrew/anaconda3/share/man/man1/arm64-apple-darwin20.0.0-redo_prebinding.1
complete -c 'arm64-apple-darwin20.0.0-redo_prebinding' -s c -d 'only check if the file needs to have it\'s prebinding redone and return status'
complete -c 'arm64-apple-darwin20.0.0-redo_prebinding' -s p -d 'check only for prebound files and return status'
complete -c 'arm64-apple-darwin20.0.0-redo_prebinding' -s d -d 'check only for dynamic shared library files and return status'
complete -c 'arm64-apple-darwin20.0.0-redo_prebinding' -s i -d 'ignore non-prebound files (useful when running on all types of files)'
complete -c 'arm64-apple-darwin20.0.0-redo_prebinding' -s z -d 'zero out the prebind check sum in the output if it has one'
complete -c 'arm64-apple-darwin20.0.0-redo_prebinding' -s u -d 'unprebind, rather than reprebind (-c, -p, -d, -e ignored)'
complete -c 'arm64-apple-darwin20.0.0-redo_prebinding' -s e -d 'replace any dependent library\'s "@executable_path" prefix with the  executabl…'
complete -c 'arm64-apple-darwin20.0.0-redo_prebinding' -o seg_addr_table -d 'The  -seg_addr_table option is used when the input a dynamic library and if s…'
complete -c 'arm64-apple-darwin20.0.0-redo_prebinding' -o seg_addr_table_filename -d 'Use  pathname instead of the install name of the library for matching an entr…'
complete -c 'arm64-apple-darwin20.0.0-redo_prebinding' -o seg1addr -d 'Move the input library to base address  address'
complete -c 'arm64-apple-darwin20.0.0-redo_prebinding' -s r -d 'prepend the  rootdir argument to all dependent libraries'
complete -c 'arm64-apple-darwin20.0.0-redo_prebinding' -s o -d 'write the updated file into  output_file rather than back into the input file'
complete -c 'arm64-apple-darwin20.0.0-redo_prebinding' -s s -d 'write the updated file to standard output DIAGNOSTICS With no -c, -p or -d an…'

