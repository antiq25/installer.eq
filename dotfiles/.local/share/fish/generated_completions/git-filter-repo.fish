# git-filter-repo
# Autogenerated from man page /opt/homebrew/share/man/man1/git-filter-repo.1
complete -c git-filter-repo -l analyze -d 'Analyze repository history and create a report that may be useful in determin…'
complete -c git-filter-repo -l invert-paths -d 'Invert the selection of files from the specified --path-{match,glob,regex} op…'
complete -c git-filter-repo -l path-match -l path -d 'Exact paths (files or directories) to include in filtered history'
complete -c git-filter-repo -l path-glob -d 'Glob of paths to include in filtered history'
complete -c git-filter-repo -l path-regex -d 'Regex of paths to include in filtered history'
complete -c git-filter-repo -l use-base-name -d 'Match on file base name instead of full path from the top of the repo'
complete -c git-filter-repo -l path-rename -l path-rename-match -d 'Path to rename; if filename or directory matches <old_name> rename to <new_na…'
complete -c git-filter-repo -l paths-from-file -d 'Specify several path filtering and renaming directives, one per line'
complete -c git-filter-repo -l subdirectory-filter -d 'Only look at history that touches the given subdirectory and treat that direc…'
complete -c git-filter-repo -l to-subdirectory-filter -d 'Treat the project root as instead being under <directory>'
complete -c git-filter-repo -l replace-text -d 'A file with expressions that, if found, will be replaced'
complete -c git-filter-repo -l strip-blobs-bigger-than -d 'Strip blobs (files) bigger than specified size (e. g.  5M, 2G, etc)'
complete -c git-filter-repo -l strip-blobs-with-ids -d 'Read git object ids from each line of the given file, and strip all of them f…'
complete -c git-filter-repo -l tag-rename -d 'Rename tags starting with <old> to start with <new>'
complete -c git-filter-repo -l replace-message -d 'A file with expressions that, if found in commit or tag messages, will be rep…'
complete -c git-filter-repo -l preserve-commit-hashes -d 'By default, since commits are rewritten and thus gain new hashes, references …'
complete -c git-filter-repo -l preserve-commit-encoding -d 'Do not reencode commit messages into UTF-8'
complete -c git-filter-repo -l mailmap -d 'Use specified mailmap file (see git-shortlog(1) for details on the format) wh…'
complete -c git-filter-repo -l use-mailmap -d 'Same as: --mailmap . mailmap'
complete -c git-filter-repo -l replace-refs -d 'Replace refs (see git-replace(1)) are used to rewrite parents (unless turned …'
complete -c git-filter-repo -l prune-empty -d 'Whether to prune empty commits'
complete -c git-filter-repo -l prune-degenerate -d 'Since merge commits are needed for history topology, they are typically exemp…'
complete -c git-filter-repo -l no-ff -d 'Even if the first parent is or becomes an ancestor of another parent, do not …'
complete -c git-filter-repo -l filename-callback -d 'Python code body for processing filenames; see the section called \\(lqCALLBAC…'
complete -c git-filter-repo -l message-callback -d 'Python code body for processing messages (both commit messages and tag messag…'
complete -c git-filter-repo -l name-callback -d 'Python code body for processing names of people; see the section called \\(lqC…'
complete -c git-filter-repo -l email-callback -d 'Python code body for processing emails addresses; see the section called \\(lq…'
complete -c git-filter-repo -l refname-callback -d 'Python code body for processing refnames; see the section called \\(lqCALLBACK…'
complete -c git-filter-repo -l blob-callback -d 'Python code body for processing blob objects; see the section called \\(lqCALL…'
complete -c git-filter-repo -l commit-callback -d 'Python code body for processing commit objects; see the section called \\(lqCA…'
complete -c git-filter-repo -l tag-callback -d 'Python code body for processing tag objects; see the section called \\(lqCALLB…'
complete -c git-filter-repo -l reset-callback -d 'Python code body for processing reset objects; see the section called \\(lqCAL…'
complete -c git-filter-repo -l source -d 'Git repository to read from'
complete -c git-filter-repo -l target -d 'Git repository to overwrite with filtered history'
complete -c git-filter-repo -l help -s h -d 'Show a help message and exit'
complete -c git-filter-repo -l force -s f -d 'Ignore fresh clone checks and rewrite history (an irreversible operation, esp…'
complete -c git-filter-repo -l partial -d 'Do a partial history rewrite, resulting in the mixture of old and new history'
complete -c git-filter-repo -l refs -d 'Limit history rewriting to the specified refs.  Implies --partial'
complete -c git-filter-repo -l dry-run -d 'Do not change the repository'
complete -c git-filter-repo -l debug -d 'Print additional information about operations being performed and commands be…'
complete -c git-filter-repo -l stdin -d 'Instead of running git fast-export and filtering its output, filter the fast-…'
complete -c git-filter-repo -l quiet -d 'Pass --quiet to other git commands called'
complete -c git-filter-repo -l no-local -d 'to git clone than passing'
complete -c git-filter-repo -l bare -d or
complete -c git-filter-repo -l mirror -d 'to git clone, if you prefer.  You should pass'
complete -c git-filter-repo -l prune -d 'options, those refs will continue to exist on the server'
complete -c git-filter-repo -l foo-callback -d 'the following code will be compiled and called: def foo_callback(foo):   BODY…'
complete -c git-filter-repo -l no-data -d 'cannot be passed to fast-export'
complete -c git-filter-repo -l aggressive -d 'isn\'t needed and would be too slow'
complete -c git-filter-repo -l full-tree -d 'would require additional code in filter-repo (to parse new directives), and o…'
complete -c git-filter-repo -s M -d or
complete -c git-filter-repo -s C -d 'would break assumptions used in other places of filter-repo.  oc o 2. 3'
complete -c git-filter-repo -l reference-excluded-parents -d 'option to fast-export that was added specifically for this usage within filte…'

