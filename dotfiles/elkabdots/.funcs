#!/usr/bin/env bash

fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}


ch() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  cp -f ~/Library/Application\ Support/Google/Chrome/Profile\ 1/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

htrackg() {
    if [ -z "$1" ]; then
        echo "Please provide a website."
        return
    fi

    # Prompt the user for the folder name
    echo -n "Enter the folder name: "
    read folder_name

    if [ -z "$folder_name" ]; then
        echo "Folder name is empty. Aborting."
        return
    fi

    httrack "$1" -O "$folder_name" -%v --robots=0 -r10 -A0 -%k
}


sourcehelp() {
	source "$HOME/.local/bin/helper"
}


function kill () {
  command kill -KILL $(pidof "$@")
}

unpkg () {
  # Check for the correct number of arguments
  if [ "$#" -ne 1 ]; then
    echo "Usage: unpack_file <filename>"
    return 1
  fi

  # Get the filename from the command line argument
  local filename="$1"

  # Check the file extension and extract accordingly
  case "$filename" in
    *.tar) tar -xvf "$filename" ;;
    *.tar.gz | *.tgz) tar -xzvf "$filename" ;;
    *.tar.bz2) tar -xjvf "$filename" ;;
    *.tar.xz) tar -xJvf "$filename" ;;
    *) echo "Unsupported file extension: $filename"; return 1 ;;
  esac

  return 0
}

