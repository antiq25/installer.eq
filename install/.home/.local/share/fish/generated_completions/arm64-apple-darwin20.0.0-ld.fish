# arm64-apple-darwin20.0.0-ld
# Autogenerated from man page /opt/homebrew/anaconda3/share/man/man1/arm64-apple-darwin20.0.0-ld.1
complete -c 'arm64-apple-darwin20.0.0-ld' -o execute -d 'The default.   Produce a mach-o main executable that has file type MH_EXECUTE'
complete -c 'arm64-apple-darwin20.0.0-ld' -o dylib -d 'Produce a mach-o shared library that has file type MH_DYLIB'
complete -c 'arm64-apple-darwin20.0.0-ld' -o bundle -d 'Produce a mach-o bundle that has file type MH_BUNDLE'
complete -c 'arm64-apple-darwin20.0.0-ld' -s r -d 'Merges object files to produce another mach-o object file with file type MH_O…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o dylinker -d 'Produce a mach-o dylinker that has file type MH_DYLINKER'
complete -c 'arm64-apple-darwin20.0.0-ld' -o dynamic -d 'The default.   Implied by -dylib, -bundle, or -execute'
complete -c 'arm64-apple-darwin20.0.0-ld' -o static -d 'Produces a mach-o file that does not use the dyld'
complete -c 'arm64-apple-darwin20.0.0-ld' -o preload -d 'Produces a mach-o file in which the mach_header, load commands, and symbol ta…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o arch -d 'Specifies which architecture (e. g'
complete -c 'arm64-apple-darwin20.0.0-ld' -s o -d 'Specifies the name and location of the output file.   If not specified, `a'
complete -c 'arm64-apple-darwin20.0.0-ld' -s l -d 'This option tells the linker to search for libx. dylib or libx'
complete -c 'arm64-apple-darwin20.0.0-ld' -o weak-l -d 'This is the same as the -lx but forces the library and all references to it t…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o weak_library -d 'This is the same as listing a file name path to a library on the link line ex…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o reexport-l -d 'This is the same as the -lx but specifies that the all symbols in library x s…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o reexport_library -d 'This is the same as listing a file name path to a library on the link line an…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o upward-l -d 'This is the same as the -lx but specifies that the dylib is an upward depende…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o upward_library -d 'This is the same as listing a file name path to a library on the link line bu…'
complete -c 'arm64-apple-darwin20.0.0-ld' -s L -d 'Add dir to the list of directories in which to search for libraries'
complete -c 'arm64-apple-darwin20.0.0-ld' -s Z -d 'Do not search the standard directories when searching for libraries and frame…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o syslibroot -d 'Prepend rootdir to all search paths when searching for libraries or frameworks'
complete -c 'arm64-apple-darwin20.0.0-ld' -o search_paths_first -d 'This is now the default (in Xcode4 tools)'
complete -c 'arm64-apple-darwin20.0.0-ld' -o search_dylibs_first -d 'Changes the searching behavior for libraries'
complete -c 'arm64-apple-darwin20.0.0-ld' -o framework -d 'This option tells the linker to search for `name'
complete -c 'arm64-apple-darwin20.0.0-ld' -o weak_framework -d 'This is the same as the -framework name[,suffix] but forces the framework and…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o reexport_framework -d 'This is the same as the -framework name[,suffix] but also specifies that the …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o upward_framework -d 'This is the same as the -framework name[,suffix] but also specifies that the …'
complete -c 'arm64-apple-darwin20.0.0-ld' -s F -d 'Add dir to the list of directories in which to search for frameworks'
complete -c 'arm64-apple-darwin20.0.0-ld' -o all_load -d 'Loads all members of static archive libraries'
complete -c 'arm64-apple-darwin20.0.0-ld' -o ObjC -d 'Loads all members of static archive libraries that implement an Objective-C c…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o force_load -d 'Loads all members of the specified static archive library'
complete -c 'arm64-apple-darwin20.0.0-ld' -o sectcreate -d 'The section sectname in the segment segname is created from the contents of f…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o filelist -d 'Specifies that the linker should link the files listed in file'
complete -c 'arm64-apple-darwin20.0.0-ld' -o dtrace -d 'Enables dtrace static probes when producing a final linked image'
complete -c 'arm64-apple-darwin20.0.0-ld' -o dead_strip -d 'Remove functions and data that are unreachable by the entry point or exported…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o order_file -d 'Alters the order in which functions and data are laid out'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_order_inits -d 'When the -order_file option is not used, the linker lays out functions in obj…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_order_data -d 'By default the linker reorders global data in the __DATA segment so that all …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o platform_version -d 'This is set to indicate the platform, oldest supported version of that platfo…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o macos_version_min -d 'This is set to indicate the oldest macOS version that that the output is to b…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o ios_version_min -d 'This is set to indicate the oldest iOS version that that the output is to be …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o image_base -d 'Specifies the preferred load address for a dylib or bundle'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_implicit_dylibs -d 'When creating a two-level namespace final linked image, normally the linker w…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o exported_symbols_order -d 'When targeting Mac OS X 10'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_zero_fill_sections -d 'By default the linker moves all zero fill sections to the end of the __DATA s…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o merge_zero_fill_sections -d 'Causes all zero-fill sections in the __DATA segment to be merged into one __z…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_branch_islands -d 'Disables linker creation of branch islands which allows images to be created …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o install_name -d 'Sets an internal "install path" (LC_ID_DYLIB) in a dynamic library'
complete -c 'arm64-apple-darwin20.0.0-ld' -o mark_dead_strippable_dylib -d 'Specifies that the dylib being built can be dead strip by any client'
complete -c 'arm64-apple-darwin20.0.0-ld' -o compatibility_version -d 'Specifies the compatibility version number of the library'
complete -c 'arm64-apple-darwin20.0.0-ld' -o current_version -d 'Specifies the current version number of the library'
complete -c 'arm64-apple-darwin20.0.0-ld' -o pie -d 'This makes a special kind of main executable that is position independent (PI…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_pie -d 'Do not make a position independent executable (PIE)'
complete -c 'arm64-apple-darwin20.0.0-ld' -o pagezero_size -d 'By default the linker creates an unreadable segment starting at address zero …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o stack_size -d 'Specifies the maximum stack size for the main thread in a program'
complete -c 'arm64-apple-darwin20.0.0-ld' -o allow_stack_execute -d 'Marks executable so that all stacks in the task will be given stack execution…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o export_dynamic -d 'Preserves all global symbols in main executables during LTO'
complete -c 'arm64-apple-darwin20.0.0-ld' -o bundle_loader -d 'This specifies the executable that will be loading the bundle output file bei…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o keep_private_externs -d 'Don\'t turn private external (aka visibility=hidden) symbols into static symbo…'
complete -c 'arm64-apple-darwin20.0.0-ld' -s d -d 'Force definition of common symbols'
complete -c 'arm64-apple-darwin20.0.0-ld' -o exported_symbols_list -d 'The specified filename contains a list of global symbol names that will remai…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o exported_symbol -d 'The specified symbol is added to the list of global symbols names that will r…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o unexported_symbols_list -d 'The specified filename contains a list of global symbol names that will not r…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o unexported_symbol -d 'The specified symbol is added to the list of global symbols names that will n…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o reexported_symbols_list -d 'The specified filename contains a list of symbol names that are implemented i…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o alias -d 'Create an alias named alternate_symbol_name for the symbol symbol_name'
complete -c 'arm64-apple-darwin20.0.0-ld' -o alias_list -d 'The specified filename contains a list of aliases'
complete -c 'arm64-apple-darwin20.0.0-ld' -o flat_namespace -d 'Alters how symbols are resolved at build time and runtime'
complete -c 'arm64-apple-darwin20.0.0-ld' -s u -d 'Specified that symbol symbol_name must be defined for the link to succeed'
complete -c 'arm64-apple-darwin20.0.0-ld' -s U -d 'Specified that it is ok for symbol_name to have no definition'
complete -c 'arm64-apple-darwin20.0.0-ld' -o undefined -d 'Specifies how undefined symbols are to be treated'
complete -c 'arm64-apple-darwin20.0.0-ld' -o rpath -d 'Add path to the runpath search path list for image being created'
complete -c 'arm64-apple-darwin20.0.0-ld' -o commons -d 'Specifies how commons (aka tentative definitions) are resolved with respect t…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o why_load -d 'Log why each object file in a static library is loaded'
complete -c 'arm64-apple-darwin20.0.0-ld' -o why_live -d 'Logs a chain of references to symbol_name.  Only applicable with -dead_strip '
complete -c 'arm64-apple-darwin20.0.0-ld' -o print_statistics -d 'Logs information about the amount of memory and time the linker used'
complete -c 'arm64-apple-darwin20.0.0-ld' -s t -d 'Logs each file (object, archive, or dylib) the linker loads'
complete -c 'arm64-apple-darwin20.0.0-ld' -o whatsloaded -d 'Logs just object files the linker loads'
complete -c 'arm64-apple-darwin20.0.0-ld' -o order_file_statistics -d 'Logs information about the processing of a -order_file'
complete -c 'arm64-apple-darwin20.0.0-ld' -o map -d 'Writes a map file to the specified path which details all symbols and their a…'
complete -c 'arm64-apple-darwin20.0.0-ld' -s S -d 'Do not put debug information (STABS or DWARF) in the output file'
complete -c 'arm64-apple-darwin20.0.0-ld' -s x -d 'Do not put non-global symbols in the output file\'s symbol table'
complete -c 'arm64-apple-darwin20.0.0-ld' -o non_global_symbols_strip_list -d 'The specified filename contains a list of non-global symbol names that should…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o non_global_symbols_no_strip_list -d 'The specified filename contains a list of non-global symbol names that should…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o oso_prefix -d 'When generating the debug map, the linker will remove the specified prefix-pa…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o bitcode_bundle -d 'Generates an embedded bitcode bundle in the output binary'
complete -c 'arm64-apple-darwin20.0.0-ld' -o bitcode_hide_symbols -d 'Specifies this option together with -bitcode_bundle to hide all non-exported …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o bitcode_symbol_map -d 'Specifies the output for bitcode symbol reverse mapping (. bcsymbolmap)'
complete -c 'arm64-apple-darwin20.0.0-ld' -s v -d 'Prints the version of the linker'
complete -c 'arm64-apple-darwin20.0.0-ld' -o version_details -d 'Prints the version info about the linker in JSON'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_weak_imports -d 'Error if any symbols are weak imports (i. e'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_deduplicate -d 'Don\'t run deduplication pass in linker'
complete -c 'arm64-apple-darwin20.0.0-ld' -o verbose_deduplicate -d 'Prints names of functions that are eliminated by deduplication and total code…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_inits -d 'Error if the output contains any static initializers'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_warn_inits -d 'Do not warn if the output contains any static initializers'
complete -c 'arm64-apple-darwin20.0.0-ld' -o debug_variant -d 'Do not warn about issues that are only problems for binaries shipping to cust…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o unaligned_pointers -d 'Specifies how unaligned pointers in __DATA segments should be handled'
complete -c 'arm64-apple-darwin20.0.0-ld' -o dirty_data_list -d 'Specifies a file containing the names of data symbols likely to be dirtied'
complete -c 'arm64-apple-darwin20.0.0-ld' -o max_default_common_align -d 'Any common symbols (aka tentative definitions, or uninitialized (zeroed) vari…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o move_to_rw_segment -d 'Moves data symbols to another segment'
complete -c 'arm64-apple-darwin20.0.0-ld' -o move_to_ro_segment -d 'Moves code symbols to another segment'
complete -c 'arm64-apple-darwin20.0.0-ld' -o rename_section -d 'Renames section orgSegment/orgSection to newSegment/newSection'
complete -c 'arm64-apple-darwin20.0.0-ld' -o rename_segment -d 'Renames all sections with orgSegment segment name to have newSegment segment …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o trace_symbol_layout -d 'For using in debugging -rename_section, -rename_segment, -move_to_ro_segment,…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o section_order -d 'Only for use with -preload'
complete -c 'arm64-apple-darwin20.0.0-ld' -o segment_order -d 'Only for use with -preload'
complete -c 'arm64-apple-darwin20.0.0-ld' -o allow_heap_execute -d 'Normally i386 main executables will be marked so that the Mac OS X 10'
complete -c 'arm64-apple-darwin20.0.0-ld' -o application_extension -d 'Specifies that the code is being linked for use in an application extension'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_application_extension -d 'Specifies that the code is being linked is not safe for use in an application…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o fatal_warnings -d 'Causes the linker to exit with a non-zero value if any warnings were emitted'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_eh_labels -d 'Normally in -r mode, the linker produces '
complete -c 'arm64-apple-darwin20.0.0-ld' -o warn_compact_unwind -d 'When producing a final linked image, the linker processes the __eh_frame sect…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o warn_weak_exports -d 'Issue a warning if the resulting final linked image contains weak external sy…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_weak_exports -d 'Issue an erro if the resulting final linked image contains weak external symb…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o objc_gc_compaction -d 'Marks the Objective-C image info in the final linked image with the bit that …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o objc_gc -d 'Verifies all code was compiled with -fobjc-gc or -fobjc-gc-only'
complete -c 'arm64-apple-darwin20.0.0-ld' -o objc_gc_only -d 'Verifies all code was compiled with -fobjc-gc-only'
complete -c 'arm64-apple-darwin20.0.0-ld' -o dead_strip_dylibs -d 'Remove dylibs that are unreachable by the entry point or exported symbols'
complete -c 'arm64-apple-darwin20.0.0-ld' -o allow_sub_type_mismatches -d 'Normally the linker considers different cpu-subtype for ARM (e. g'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_uuid -d 'Do not generate an LC_UUID load command in the output file'
complete -c 'arm64-apple-darwin20.0.0-ld' -o root_safe -d 'Sets the MH_ROOT_SAFE bit in the mach header of the output file'
complete -c 'arm64-apple-darwin20.0.0-ld' -o setuid_safe -d 'Sets the MH_SETUID_SAFE bit in the mach header of the output file'
complete -c 'arm64-apple-darwin20.0.0-ld' -o interposable -d 'Indirects access to all to exported symbols when creating a dynamic library'
complete -c 'arm64-apple-darwin20.0.0-ld' -o init -d 'The specified symbol_name will be run as the first initializer'
complete -c 'arm64-apple-darwin20.0.0-ld' -o sub_library -d 'The specified dylib will be re-exported'
complete -c 'arm64-apple-darwin20.0.0-ld' -o sub_umbrella -d 'The specified framework will be re-exported'
complete -c 'arm64-apple-darwin20.0.0-ld' -o allowable_client -d 'Restricts what can link against the dynamic library being created'
complete -c 'arm64-apple-darwin20.0.0-ld' -o client_name -d 'Enables a bundle to link against a dylib that was built with -allowable_client'
complete -c 'arm64-apple-darwin20.0.0-ld' -o umbrella -d 'Specifies that the dylib being linked is re-exported through an umbrella fram…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o headerpad -d 'Specifies the minimum space for future expansion of the load commands'
complete -c 'arm64-apple-darwin20.0.0-ld' -o headerpad_max_install_names -d 'Automatically adds space for future expansion of load commands such that all …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o bind_at_load -d 'Sets a bit in the mach header of the resulting binary which tells dyld to bin…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o force_flat_namespace -d 'Sets a bit in the mach header of the resulting binary which tells dyld to not…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o sectalign -d 'The section named sectname in the segment segname will have its alignment set…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o stack_addr -d 'Specifies the initial address of the stack pointer value, where value is a he…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o segprot -d 'Specifies the maximum and initial virtual memory protection of the named segm…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o seg_addr_table -d 'Specifies a file containing base addresses for dynamic libraries'
complete -c 'arm64-apple-darwin20.0.0-ld' -o segs_read_write_addr -d 'Allows a dynamic library to be built where the read-only and read-write segme…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o segs_read_only_addr -d 'Allows a dynamic library to be built where the read-only and read-write segme…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o segaddr -d 'Specifies the starting address of the segment named name to be address'
complete -c 'arm64-apple-darwin20.0.0-ld' -o seg_page_size -d 'Specifies the page size used by the specified segment'
complete -c 'arm64-apple-darwin20.0.0-ld' -o dylib_file -d 'Specifies that a dynamic shared library is in a different location than its s…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o prebind -d 'The created output file will be in the prebound format'
complete -c 'arm64-apple-darwin20.0.0-ld' -o weak_reference_mismatches -d 'Specifies what to do if a symbol is weak-imported in one object file but not …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o read_only_relocs -d 'Enables the use of relocations which will cause dyld to modify (copy-on-write…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o force_cpusubtype_ALL -d 'The is only applicable with -arch ppc'
complete -c 'arm64-apple-darwin20.0.0-ld' -o dylinker_install_name -d 'Only used when building dyld'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_arch_warnings -d 'Suppresses warning messages about files that have the wrong architecture for …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o arch_errors_fatal -d 'Turns into errors, warnings about files that have the wrong architecture for …'
complete -c 'arm64-apple-darwin20.0.0-ld' -s e -d 'Specifies the entry point of a main executable'
complete -c 'arm64-apple-darwin20.0.0-ld' -s w -d 'Suppress all warning messages'
complete -c 'arm64-apple-darwin20.0.0-ld' -o final_output -d 'Specifies the install name of a dylib if -install_name is not used'
complete -c 'arm64-apple-darwin20.0.0-ld' -o arch_multiple -d 'Specifes that the linker should augment error and warning messages with the a…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o twolevel_namespace_hints -d 'Specifies that hints should be added to the resulting binary that can help sp…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o dot -d 'Create a file at the specified path containing a graph of symbol dependencies'
complete -c 'arm64-apple-darwin20.0.0-ld' -o keep_relocs -d 'Add section based relocation records to a final linked image'
complete -c 'arm64-apple-darwin20.0.0-ld' -o warn_stabs -d 'Print a warning when the linker cannot do a BINCL/EINCL optimization because …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o warn_commons -d 'Print a warning whenever the a tentative definition in an object file is foun…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o read_only_stubs -d '[i386 only] Makes the __IMPORT segment of a final linked images read-only'
complete -c 'arm64-apple-darwin20.0.0-ld' -o slow_stubs -d '[i386 only]  Instead of using single JMP instruction stubs, the linker create…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o interposable_list -d 'The specified filename contains a list of global symbol names that should alw…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_function_starts -d 'By default the linker creates a compress table of function start addresses in…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_objc_category_merging -d 'By default when producing final linked image, the linker will optimize Object…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o object_path_lto -d 'When performing Link Time Optimization (LTO) and a temporary mach-o object fi…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o lto_library -d 'When performing Link Time Optimization (LTO), the linker normally loads libLTO'
complete -c 'arm64-apple-darwin20.0.0-ld' -o cache_path_lto -d 'When performing Incremental Link Time Optimization (LTO), use this directory …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o prune_interval_lto -d 'When performing Incremental Link Time Optimization (LTO), the cache will prun…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o prune_after_lto -d 'When pruning the cache for Incremental Link Time Optimization (LTO), the cach…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o max_relative_cache_size_lto -d 'When performing Incremental Link Time Optimization (LTO), the cache will be p…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o page_align_data_atoms -d 'During development, this option can be used to space out all global variables…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o not_for_dyld_shared_cache -d 'Normally, the linker will add extra info to dylibs with -install_name startin…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o segalign -d 'All segments must be page aligned'
complete -c 'arm64-apple-darwin20.0.0-ld' -o seglinkedit -d 'Object files (MH_OBJECT) with a LINKEDIT segment are no longer supported'
complete -c 'arm64-apple-darwin20.0.0-ld' -o noseglinkedit -d 'This is the default.   This option is obsolete'
complete -c 'arm64-apple-darwin20.0.0-ld' -o fvmlib -d 'Fixed VM shared libraries (MH_FVMLIB) are no longer supported'
complete -c 'arm64-apple-darwin20.0.0-ld' -o sectobjectsymbols -d 'Adding a local label at a section start is no longer supported'
complete -c 'arm64-apple-darwin20.0.0-ld' -o nofixprebinding -d 'The MH_NOFIXPREBINDING bit of mach_headers has been ignored since Mac OS X 10'
complete -c 'arm64-apple-darwin20.0.0-ld' -o noprebind_all_twolevel_modules -d 'Multi-modules in dynamic libraries have been ignored at runtime since Mac OS …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o prebind_all_twolevel_modules -d 'Multi-modules in dynamic libraries have been ignored at runtime since Mac OS …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o prebind_allow_overlap -d 'When using -prebind, the linker allows overlapping by default, so this option…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o noprebind -d 'LD_PREBIND is no longer supported as a way to force on prebinding, so there n…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o sect_diff_relocs -d 'This option was an attempt to warn about linking '
complete -c 'arm64-apple-darwin20.0.0-ld' -o run_init_lazily -d 'This option was removed in Mac OS X 10. 2'
complete -c 'arm64-apple-darwin20.0.0-ld' -o single_module -d 'This is now the default so does not need to be specified'
complete -c 'arm64-apple-darwin20.0.0-ld' -o multi_module -d 'Multi-modules in dynamic libraries have been ignored at runtime since Mac OS …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o no_dead_strip_inits_and_terms -d 'The linker never dead strips initialization and termination routines'
complete -c 'arm64-apple-darwin20.0.0-ld' -s A -d 'Obsolete incremental load format.   This option is obsolete'
complete -c 'arm64-apple-darwin20.0.0-ld' -s b -d 'Used with -A option to strip base file\'s symbols.   This option is obsolete'
complete -c 'arm64-apple-darwin20.0.0-ld' -o Sn -d 'Don\'t strip any symbols.   This is the default.   This option is obsolete'
complete -c 'arm64-apple-darwin20.0.0-ld' -o Si -d 'Optimize stabs debug symbols to remove duplicates.   This is the default'
complete -c 'arm64-apple-darwin20.0.0-ld' -o Sp -d 'Write minimal stabs which causes the debugger to open and read the original '
complete -c 'arm64-apple-darwin20.0.0-ld' -s X -d 'Strip local symbols that begin with \'L\'.   This is the default'
complete -c 'arm64-apple-darwin20.0.0-ld' -s s -d 'Completely strip the output, including removing the symbol table'
complete -c 'arm64-apple-darwin20.0.0-ld' -s m -d 'Don\'t treat multiple definitions as an error.   This is no longer supported'
complete -c 'arm64-apple-darwin20.0.0-ld' -s y -d 'Display each file in which symbol is used'
complete -c 'arm64-apple-darwin20.0.0-ld' -s Y -d 'Used to control how many occurrences of each symbol specified with -y would b…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o nomultidefs -d 'Only used when linking an umbrella framework'
complete -c 'arm64-apple-darwin20.0.0-ld' -o multiply_defined_unused -d 'Previously provided a way to warn or error if any of the symbol definitions i…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o multiply_defined -d 'Previously provided a way to warn or error if any of the symbols used from a …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o private_bundle -d 'Previously prevented errors when -flat_namespace, -bundle, and -bundle_loader…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o noall_load -d 'This is the default.   This option is obsolete'
complete -c 'arm64-apple-darwin20.0.0-ld' -o seg_addr_table_filename -d 'Use path instead of the install name of the library for matching an entry in …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o sectorder -d 'Replaced by more general -order_file option'
complete -c 'arm64-apple-darwin20.0.0-ld' -o sectorder_detail -d 'Produced extra logging about which entries from a sectorder entries were used'
complete -c 'arm64-apple-darwin20.0.0-ld' -o lazy_framework -d 'This is the same as the -framework name[,suffix] except that the linker will …'
complete -c 'arm64-apple-darwin20.0.0-ld' -o lazy-l -d 'This is the same as the -lx but it is only for shared libraries and the linke…'
complete -c 'arm64-apple-darwin20.0.0-ld' -o lazy_library -d 'This is the same as listing a file name path to a shared library on the link …'

